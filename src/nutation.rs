use angle;
use time;

/*

    NOTE: All angles passed as arguments, and those returned,
          are assumed to be radians, even if the comments
          describe them with degrees.

*/

/*

    Returns the nutation correction for longitude and obliquity,
    that is, it returns the correction that needs to be added to
    the longitude and the obliquity of the ecliptic to adjust for
    the Earth's nutation. Nutation does not affect latitudes.
    -----------------------------------------------------------------
        jed: The Julian Emphemeris Day

*/

pub fn nutation(jed: f64) -> (f64, f64) {

    let t = time::julian_centuries(jed);

    let mut M1 = angle::limited_to_360((134.96298 + t*(477198.867398 + t*(0.0086972 + t/5620.0)))).to_radians();
    let mut M = angle::limited_to_360((357.52772 + t*(35999.050340 - t*(0.0001603 + t/300000.0)))).to_radians();
    let mut D = angle::limited_to_360((297.85036 + t*(445267.11148 - t*(0.0019142 + t/189474.0)))).to_radians();
    let mut F = angle::limited_to_360((93.27191 + t*(483202.017538 - t*(-0.0036825 - t/327270.0)))).to_radians();
    let mut om = angle::limited_to_360((125.04452 - t*(1934.136261 - t*(0.0020708 + t/450000.0)))).to_radians();

    struct terms(i8, i8, i8, i8, i8, f64, f64, f64, f64);

    let tuple_terms = [
        terms(0, 0, 0, 0, 1, -171996.0, -174.2, 92025.0, 8.9),
        terms(-2, 0, 0, 2, 2, -13187.0, -1.6, 5736.0, -3.1),
        terms(0, 0, 0, 2, 2, -2274.0, -0.2, 977.0, -0.5),
        terms(0, 0, 0, 0, 2, 2062.0, 0.2, -895.0, 0.5),
        terms(0, 1, 0, 0, 0, 1426.0, -3.4, 54.0, -0.1),
        terms(0, 0, 1, 0, 0, 712.0, 0.1, -7.0, 0.0),
        terms(-2, 1, 0, 2, 2, -517.0, 1.2, 224.0, -0.6),
        terms(0, 0, 0, 2, 1, -386.0, -0.4, 200.0, 0.0),
        terms(0, 0, 1, 2, 2, -301.0, 0.0, 129.0, -0.1),
        terms(-2, -1, 0, 2, 2, 217.0, -0.5, -95.0, 0.3),
        terms(-2, 0, 1, 0, 0, -158.0, 0.0, 0.0, 0.0),
        terms(-2, 0, 0, 2, 1, 129.0, 0.1, -70.0, 0.0),
        terms(0, 0, -1, 2, 2, 123.0, 0.0, -53.0, 0.0),
        terms(2, 0, 0, 0, 0, 63.0, 0.0, 0.0, 0.0),
        terms(0, 0, 1, 0, 1, 63.0, 0.1, -33.0, 0.0),
        terms(2, 0, -1, 2, 2, -59.0, 0.0, 26.0, 0.0),
        terms(0, 0, -1, 0, 1, -58.0, -0.1, 32.0, 0.0),
        terms(0, 0, 1, 2, 1, -51.0, 0.0, 27.0, 0.0),
        terms(-2, 0, 2, 0, 0, 48.0, 0.0, 0.0, 0.0),
        terms(0, 0, -2, 2, 1, 46.0, 0.0, -24.0, 0.0),
        terms(2, 0, 0, 2, 2, -38.0, 0.0, 16.0, 0.0),
        terms(0, 0, 2, 0, 0, 29.0, 0.0, 0.0, 0.0),
        terms(-2, 0, 1, 2, 2, 29.0, 0.0, -12.0, 0.0),
        terms(0, 0, 0, 2, 0, 26.0, 0.0, 0.0, 0.0),
        terms(-2, 0, 0, 2, 0, -22.0, 0.0, 0.0, 0.0),
        terms(0, 0, -1, 2, 1, 21.0, 0.0, -10.0, 0.0),
        terms(0, 2, 0, 0, 0, 17.0, -0.1, 0.0, 0.0),
        terms(2, 0, -1, 0, 1, 16.0, 0.0, -8.0, 0.0),
        terms(-2, 2, 0, 2, 2, -16.0, 0.1, 7.0, 0.0),
        terms(0, 1, 0, 0, 1, -15.0, 0.0, 9.0, 0.0),
        terms(-2, 0, 1, 0, 1, -13.0, 0.0, 7.0, 0.0),
        terms(0, -1, 0, 0, 1, -12.0, 0.0, 6.0, 0.0),
        terms(0, 0, 2, -2, 0, 11.0, 0.0, 0.0, 0.0),
        terms(2, 0, -1, 2, 1, -10.0, 0.0, 5.0, 0.0),
        terms(2, 0, 1, 2, 2, -8.0, 0.0, 3.0, 0.0),
        terms(0, 1, 0, 2, 2, 7.0, 0.0, -3.0, 0.0),
        terms(-2, 1, 1, 0, 0, -7.0, 0.0, 0.0, 0.0),
        terms(0, -1, 0, 2, 2, -7.0, 0.0, 3.0, 0.0),
        terms(2, 0, 0, 2, 1, -7.0, 0.0, 3.0, 0.0),
        terms(2, 0, 1, 0, 0, 6.0, 0.0, 0.0, 0.0),
        terms(-2, 0, 2, 2, 2, 6.0, 0.0, -3.0, 0.0),
        terms(-2, 0, 1, 2, 1, 6.0, 0.0, -3.0, 0.0),
        terms(2, 0, -2, 0, 1, -6.0, 0.0, 3.0, 0.0),
        terms(2, 0, 0, 0, 1, -6.0, 0.0, 3.0, 0.0),
        terms(0, -1, 1, 0, 0, 5.0, 0.0, 0.0, 0.0),
        terms(-2, -1, 0, 2, 1, -5.0, 0.0, 3.0, 0.0),
        terms(-2, 0, 0, 0, 1, -5.0, 0.0, 3.0, 0.0),
        terms(0, 0, 2, 2, 1, -5.0, 0.0, 3.0, 0.0),
        terms(-2, 0, 2, 0, 1, 4.0, 0.0, 0.0, 0.0),
        terms(-2, 1, 0, 2, 1, 4.0, 0.0, 0.0, 0.0),
        terms(0, 0, 1, -2, 0, 4.0, 0.0, 0.0, 0.0),
        terms(-1, 0, 1, 0, 0, -4.0, 0.0, 0.0, 0.0),
        terms(-2, 1, 0, 0, 0, -4.0, 0.0, 0.0, 0.0),
        terms(1, 0, 0, 0, 0, -4.0, 0.0, 0.0, 0.0),
        terms(0, 0, 1, 2, 0, 3.0, 0.0, 0.0, 0.0),
        terms(0, 0, -2, 2, 2, -3.0, 0.0, 0.0, 0.0),
        terms(-1, -1, 1, 0, 0, -3.0, 0.0, 0.0, 0.0),
        terms(0, 1, 1, 0, 0, -3.0, 0.0, 0.0, 0.0),
        terms(0, -1, 1, 2, 2, -3.0, 0.0, 0.0, 0.0),
        terms(2, -1, -1, 2, 2, -3.0, 0.0, 0.0, 0.0),
        terms(0, 0, 3, 2, 2, -3.0, 0.0, 0.0, 0.0),
        terms(2, -1, 0, 2, 2, -3.0, 0.0, 0.0, 0.0),
    ];

    let mut nut_in_long = 0.0;
    let mut nut_in_obl = 0.0;

    for x in tuple_terms.iter() {
        let arg = (x.0 as f64) * D +
                   (x.1 as f64) * M +
                   (x.2 as f64) * M1 +
                   (x.3 as f64) * F +
                   (x.4 as f64) * om;
        nut_in_long += ((x.5 as f64) + t*(x.6 as f64)) * arg.sin() * (0.0001 / 3600.0);
        nut_in_obl += ((x.7 as f64) + t*(x.8 as f64)) * arg.cos() * (0.0001 / 3600.0);
    }

    (nut_in_long.to_radians(), nut_in_obl.to_radians())
}
